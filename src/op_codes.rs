#[derive(Debug, Clone, Copy, PartialEq)]
pub enum OpCode {
    MOV = 0x01,
    ADD = 0x02,
    SUB = 0x03,
    MUL = 0x04,
    DIV = 0x05,
    CMP = 0x06,
    JMP = 0x07,
    JEQ = 0x08,
    JNE = 0x09,
    JLT = 0x0A,
    JGT = 0x0B,
    LOAD = 0x0C,
    STORE = 0x0D,
    PUSH = 0x0E,
    POP = 0x0F,
    CALL = 0x10,
    RET = 0x11,
    HALT = 0x12,
    NOP = 0x13,
    AND = 0x14,
    OR = 0x15,
    XOR = 0x16,
    NOT = 0x17,
    LSL = 0x18,
    LSR = 0x19,
    PRINT = 0x1A,
    PRINTC = 0x1B,
    INPUT = 0x1C,
}

impl OpCode {
    #[inline]
    pub(crate) fn from_u8(value: u8) -> Option<OpCode> {
        match value {
            0x01 => Some(OpCode::MOV),
            0x02 => Some(OpCode::ADD),
            0x03 => Some(OpCode::SUB),
            0x04 => Some(OpCode::MUL),
            0x05 => Some(OpCode::DIV),
            0x06 => Some(OpCode::CMP),
            0x07 => Some(OpCode::JMP),
            0x08 => Some(OpCode::JEQ),
            0x09 => Some(OpCode::JNE),
            0x0A => Some(OpCode::JLT),
            0x0B => Some(OpCode::JGT),
            0x0C => Some(OpCode::LOAD),
            0x0D => Some(OpCode::STORE),
            0x0E => Some(OpCode::PUSH),
            0x0F => Some(OpCode::POP),
            0x10 => Some(OpCode::CALL),
            0x11 => Some(OpCode::RET),
            0x12 => Some(OpCode::HALT),
            0x13 => Some(OpCode::NOP),
            0x14 => Some(OpCode::AND),
            0x15 => Some(OpCode::OR),
            0x16 => Some(OpCode::XOR),
            0x17 => Some(OpCode::NOT),
            0x18 => Some(OpCode::LSL),
            0x19 => Some(OpCode::LSR),
            0x1A => Some(OpCode::PRINT),
            0x1B => Some(OpCode::PRINTC),
            0x1C => Some(OpCode::INPUT),
            _ => None,
        }
    }
}